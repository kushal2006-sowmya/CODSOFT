#include <iostream>
#include <string>
using namespace std;
const int MAX_TASKS = 100;
struct Task {
    string description;
    bool completed;
};
void addTask(Task tasks[], int &taskCount);
void viewTasks(Task tasks[], int taskCount);
void markTaskCompleted(Task tasks[], int taskCount);
void removeTask(Task tasks[], int &taskCount);
int main() {
    Task tasks[MAX_TASKS];
    int taskCount = 0;
    int choice;
    do {
        cout << "\nTo-Do List Manager\n";
        cout << "1. Add Task\n";
        cout << "2. View Tasks\n";
        cout << "3. Mark Task as Completed\n";
        cout << "4. Remove Task\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        cin.ignore();
switch (choice) {
            case 1:
                addTask(tasks, taskCount);
                break;
            case 2:
                viewTasks(tasks, taskCount);
                break;
            case 3:
                markTaskCompleted(tasks, taskCount);
                break;
            case 4:
                removeTask(tasks, taskCount);
                break;
            case 5:
                cout << "Exiting the program. Goodbye!\n";
                break;
            default:
                cout << "Invalid choice! Please try again.\n";
        }
    } while (choice != 5);

    return 0;
}
void addTask(Task tasks[], int &taskCount) {
    if (taskCount >= MAX_TASKS) {
        cout << "Task list is full! Cannot add more tasks.\n";
        return;
    }
    cout << "Enter the task description: ";
    getline(cin, tasks[taskCount].description);
    tasks[taskCount].completed = false;
    taskCount++;
    cout << "Task added successfully!\n";
}
void viewTasks(Task tasks[], int taskCount) {
    if (taskCount == 0) {
        cout << "No tasks in the list.\n";
        return;
    }
    cout << "\nTo-Do List:\n";
    for (int i = 0; i < taskCount; i++) {
        cout << i + 1 << ". " << tasks[i].description
             << " [" << (tasks[i].completed ? "Completed" : "Pending") << "]\n";
    }
}
void markTaskCompleted(Task tasks[], int taskCount) {
    if (taskCount == 0) {
        cout << "No tasks to mark as completed.\n";
        return;
    }
    int taskNumber;
    cout << "Enter the task number to mark as completed: ";
    cin >> taskNumber;
    if (taskNumber < 1 || taskNumber > taskCount) {
        cout << "Invalid task number!\n";
    } else {
        tasks[taskNumber - 1].completed = true;
        cout << "Task marked as completed successfully!\n";
    }
}
void removeTask(Task tasks[], int &taskCount) {
    if (taskCount == 0) {
        cout << "No tasks to remove.\n";
        return;
    }
    int taskNumber;
    cout << "Enter the task number to remove: ";
    cin >> taskNumber;
    if (taskNumber < 1 || taskNumber > taskCount) {
        cout << "Invalid task number!\n";
    } else {
        for (int i = taskNumber - 1; i < taskCount - 1; i++) {
            tasks[i] = tasks[i + 1];
        }
        taskCount--;
        cout << "Task removed successfully!\n";
    }
}
